D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:317: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a - series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:328: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a / (series_b.abs() + eps)
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a * series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:317: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a - series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:328: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a / (series_b.abs() + eps)
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a * series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:317: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a - series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:328: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a / (series_b.abs() + eps)
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a * series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:317: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a - series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:328: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a / (series_b.abs() + eps)
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a * series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:317: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a - series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:328: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a / (series_b.abs() + eps)
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a * series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:317: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a - series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:328: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a / (series_b.abs() + eps)
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a * series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:317: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a - series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:328: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a / (series_b.abs() + eps)
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a * series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:317: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a - series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:328: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a / (series_b.abs() + eps)
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a * series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:317: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a - series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:328: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a / (series_b.abs() + eps)
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a * series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:317: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a - series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:328: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a / (series_b.abs() + eps)
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a * series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:317: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a - series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:328: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a / (series_b.abs() + eps)
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a * series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:317: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a - series_b
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:328: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a / (series_b.abs() + eps)
D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[new_name] = series_a * series_b
[llm] request 3 expressions from gpt-3.5-turbo
[llm] tokens prompt=2568 completion=327
[llm] valid expressions 3
Generated 3 expressions -> user_data\freqai_expressions.json
  exp_1: adjusted(correlation)=2.0032
  exp_2: adjusted(correlation)=0.2875
  exp_3: adjusted(correlation)=0.1318
[wrapper] run #1: C:\Python313\python.exe D:\Agent_market\freqtrade\scripts\freqai_expression_agent.py --config D:\Agent_market\configs\config_freqai_multi.json --feature-file D:\Agent_market\user_data\freqai_features_multi.json --output user_data\freqai_expressions.json --timeframe 4h --feedback-top 0 --llm-model gpt-3.5-turbo --llm-count 3 --llm-loops 1 --llm-timeout 60.0
[wrapper] saved raw: D:\Agent_market\user_data\llm_raw\expr_20250930-042506_try1.json
[wrapper] success
